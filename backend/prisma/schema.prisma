// Conexión a la base de datos PostgreSQL
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Generador del cliente Prisma
generator client {
  provider = "prisma-client-js"
}

// Modelo de Usuario (User)
model User {
  id          String        @id @default(uuid())
  fullName    String
  email       String        @unique
  role        String
  createdAt   DateTime      @default(now())
  passwordHash String?      // <-- NUEVO (hash de contraseña)
  enrollments Enrollment[]
  attendances Attendance[]
  passwordResets PasswordReset[]
}

// Modelo de Curso (Course)
model Course {
  id          String    @id @default(uuid()) // ID único para el curso
  name        String   // Nombre del curso
  description String?  // Descripción opcional del curso
  dayOfWeek   Int      // Día de la semana (6 = sábado)
  startTime   DateTime // Hora de inicio
  endTime     DateTime // Hora de fin
  sessions    Session[] // Relación con las sesiones del curso
  enrollments Enrollment[] @relation("CourseEnrollments") // Relación con las inscripciones del curso
}

// Modelo de Inscripción (Enrollment)
model Enrollment {
  userId   String // ID del usuario
  courseId String // ID del curso
  user     User   @relation(fields: [userId], references: [id]) // Relación con el usuario
  course   Course @relation(fields: [courseId], references: [id], name: "CourseEnrollments") // Relación con el curso
  @@id([userId, courseId]) // Llave primaria compuesta por userId y courseId
}

// Modelo de Sesión (Session)
model Session {
  id        String    @id @default(uuid()) // ID único para la sesión
  courseId  String   // ID del curso
  sessionDate DateTime // Fecha de la sesión
  startAt   DateTime // Hora de inicio de la sesión
  endAt     DateTime // Hora de fin de la sesión
  attendance Attendance[] // Relación con las asistencias de la sesión
  course    Course   @relation(fields: [courseId], references: [id]) // Relación con el curso
}

// Modelo de Asistencia (Attendance)
model Attendance {
  id        String   @id @default(uuid())
  sessionId String
  userId    String
  status    String
  checkinAt DateTime
  session   Session  @relation(fields: [sessionId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([sessionId, userId]) // <-- evita doble marca a nivel BD
}

model PasswordReset {
  id         String   @id @default(uuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tokenHash  String   // SHA-256 del token
  expiresAt  DateTime
  used       Boolean  @default(false)
  createdAt  DateTime @default(now())

  @@index([userId])
  @@index([tokenHash])
}

